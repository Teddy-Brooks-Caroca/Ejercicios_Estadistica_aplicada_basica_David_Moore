group_by(objetivo)
datos_clientes_general %>%
group_by(objetivo) %>%
count(n)
datos_clientes_general %>%
group_by(objetivo) %>%
count()
datos_clientes_general %>%
group_by(objetivo) %>%
summarise(cantidad_cliente = count(n))
datos_clientes_general %>%
group_by(objetivo) %>%
summarise(cantidad_cliente = n())
agrupados_por_objetivo <- datos_clientes_general %>%
group_by(objetivo) %>%
summarise(cantidad_cliente = n())
barplot(agrupados_por_objetivo)
agrupados_por_objetivo <- datos_clientes_general %>%
group_by(objetivo) %>%
summarise(cantidad_clientes = n())
barplot(agrupados_por_objetivo,names.arg = objetivo)
barplot(
height = agrupados_por_objetivo$cantidad_clientes,
names.arg = agrupados_por_objetivo$objetivo,
col = "steelblue",
main = "Cantidad de clientes por objetivo",
xlab = "Objetivo de entrenamiento",
ylab = "Cantidad de clientes",
las = 2
)
barplot(
height = agrupados_por_objetivo$cantidad_clientes,
names.arg = agrupados_por_objetivo$objetivo,
col = "steelblue",
main = "Cantidad de clientes por objetivo",
xlab = "Objetivo de entrenamiento",
ylab = "Cantidad de clientes",
las = 4
)
barplot(
height = agrupados_por_objetivo$cantidad_clientes,
names.arg = agrupados_por_objetivo$objetivo,
col = "steelblue",
main = "Cantidad de clientes por objetivo",
xlab = "Objetivo de entrenamiento",
ylab = "Cantidad de clientes",
las = 2
)
barplot(
height = agrupados_por_objetivo$cantidad_clientes,
names.arg = agrupados_por_objetivo$objetivo,
col = "steelblue",
main = "Cantidad de clientes por objetivo",
xlab = "Objetivo de entrenamiento",
ylab = "Cantidad de clientes",
las = 1
)
barplot(
height = agrupados_por_objetivo$cantidad_clientes,
names.arg = agrupados_por_objetivo$objetivo,
col = "steelblue",
main = "Cantidad de clientes por objetivo",
xlab = "Objetivo de entrenamiento",
ylab = "Cantidad de clientes",
las = 1.5
)
ggplot(agrupados_por_objetivo,aes(x = objetivo, y = cantidad_clientes)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cantidad de clientes por objetivo",
x = "Objetivo de entrenamiento",
y = "Cantidad de clientes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(agrupados_por_objetivo,aes(x = objetivo, y = cantidad_clientes, fill= objetivo)) +
geom_bar(stat = "identity", width = 0.5) +
labs(title = "Cantidad de clientes por objetivo",
x = "Objetivo de entrenamiento",
y = "Cantidad de clientes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(agrupados_por_objetivo,aes(x = objetivo, y = cantidad_clientes)) +
geom_bar(stat = "identity", fill = "steelblue",width = 0.5) +
labs(title = "Cantidad de clientes por objetivo",
x = "Objetivo de entrenamiento",
y = "Cantidad de clientes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(datos_clientes_general$peso,datos_clientes_general$altura,
main = "Relacion peso x altura",
xlab = "peso",
ylab = "altura")
plot(datos_clientes_general$peso,datos_clientes_general$altura,
main = "Relacion peso x altura",
xlab = "peso",
ylab = "altura",
pch = 19,
col = "blue")
plot(datos_clientes_general$peso,datos_clientes_general$altura,
main = "Relación peso x altura",
xlab = "Peso (en kls.)",
ylab = "Altura (en mts.)",
pch = 19,
col = "blue")
ggplot(datos_clientes_general,aes(x = peso, y = altura))+
geom_point()
ggplot(datos_clientes_general, aes(x = peso, y = altura, color = objetivo)) +
geom_point(size = 3, alpha = 0.7) +
labs(
title = "Relación entre peso y altura",
x = "Peso (kg)",
y = "Altura (m)",
color = "Objetivo"
) +
theme_minimal()
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = objetivo)) +
geom_point(size = 3, alpha = 0.7) +
labs(
title = "Relación entre IMC y edad",
x = "IMC",
y = "Edad",
color = "Objetivo"
) +
theme_minimal()
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3, alpha = 0.7) +
labs(
title = "Relación entre IMC y edad",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
theme_minimal()
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3, alpha = 0.7) +
labs(
title = "Relación entre IMC y edad",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
abline(lm(edad ~ IMC,data = datos_clientes_general),col = "red") +
theme_minimal()
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3.5, alpha = 0.8) +
labs(
title = "Relación entre IMC y edad",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
theme_minimal(base_size = 13)
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3.5, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "gray40") +
labs(
title = "Relación entre IMC y edad",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
theme_minimal(base_size = 13)
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3.5, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "gray40") +
labs(
title = "Relación entre IMC y edad",
subtitle = "Colores según la observación nutricional",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
theme_minimal(base_size = 13)
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3.5, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "gray40") +
labs(
title = "Relación entre IMC y edad",
subtitle = "Colores según la observación nutricional",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
theme_minimal(base_size = 13) +
facet_wrap(~observacion_IMC)
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3.5, alpha = 0.8) +
labs(
title = "Relación entre IMC y edad",
subtitle = "Colores según la observación nutricional",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
theme_minimal(base_size = 13) +
facet_wrap(~observacion_IMC)
ggplot(datos_clientes_general, aes(x = IMC, y = edad, color = observacion_IMC)) +
geom_point(size = 3.5, alpha = 0.8) +
geom_text(aes(label = cliente), hjust = 1.2, vjust = 0.5, size = 3, show.legend = FALSE) +
labs(
title = "Relación entre IMC y edad",
subtitle = "Colores según la observación nutricional",
x = "IMC",
y = "Edad",
color = "Observacion_IMC"
) +
theme_minimal(base_size = 13) +
facet_wrap(~observacion_IMC)
evolucion_peso_P001 <- data.frame(
mes = c("Enero", "Enero", "Enero",
"Febrero", "Febrero", "Febrero",
"Marzo", "Marzo", "Marzo",
"Abril", "Abril", "Abril",
"Mayo", "Mayo", "Mayo",
"Junio", "Junio", "Junio"),
peso = c(72.0, 71.8, 72.2,
71.5, 71.3, 71.6,
71.0, 70.8, 71.1,
70.5, 70.6, 70.4,
70.2, 70.0, 70.1,
69.8, 69.9, 69.7)
)
ggplot(evolucion_peso_P001, aes(x = mes, y = peso, group = 1)) +
geom_line(color = "blue", linewidth = 1) +
geom_point(color = "red", size = 2.5) +
labs(
title = "Evolución del peso de P001 en 6 meses",
x = "Mes",
y = "Peso (kg)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ggplot(evolucion_peso_P001, aes(x = mes, y = peso, group = 1)) +
geom_line(color = "blue", linewidth = 1) +
geom_point(color = "red", size = 2.5) +
labs(
title = "Evolución del peso de P001 en 6 meses",
x = "Mes",
y = "Peso (kg)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
evolucion_peso$mes <- factor(
evolucion_peso$mes,
levels = c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio")
)
evolucion_peso_P001$mes <- factor(
evolucion_peso_P001$mes,
levels = c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio")
)
ggplot(evolucion_peso_P001, aes(x = mes, y = peso, group = 1)) +
geom_line(color = "blue", linewidth = 1) +
geom_point(color = "red", size = 2.5) +
labs(
title = "Evolución del peso de P001 en 6 meses",
x = "Mes",
y = "Peso (kg)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos_clientes_general, aes(x = objetivo, fill = objetivo)) +
geom_bar() +
scale_fill_manual(
values = c(
"Acondicionamiento" = "skyblue",
"Musculación" = "tomato",
"Perdida" = "palegreen"
)
) +
labs(title = "Clientes por objetivo de entrenamiento") +
theme_minimal()
grafico_objetivo <- ggplot(datos_clientes_general, aes(x = objetivo, fill = objetivo)) +
geom_bar() +
scale_fill_manual(
values = c(
"Acondicionamiento" = "skyblue",
"Musculación" = "tomato",
"Perdida" = "palegreen"
)
) +
labs(title = "Clientes por objetivo de entrenamiento") +
theme_minimal()
ggsave("grafico_objetivo.png",plot = grafico_objetivo, width = 8, height = 5, dpi = 300)
lm(peso ~ altura,data = datos_clientes_general)
predecir_peso_por_altura <- lm(peso ~ altura,data = datos_clientes_general)
summary(predecir_peso_por_altura)
View(df_historial)
View(datos_clientes_gym)
View(datos_clientes_lista)
View(evolucion_peso_P001)
View(nuevos_datos)
tabla_completa_clientes <- left_join(datos_clientes_general,df_historial, by = "ID")
?left_join
library(dbplyr)
library(dplyr)
tabla_completa_clientes <- left_join(datos_clientes_general,df_historial, by = "ID")
View(tabla_completa_clientes)
datos_clientes_general$estado_salud <- ifelse(
tabla_completa_clientes$IMC >= 18.5 & tabla_completa_clientes$IMC <= 24.9 &
tabla_completa_clientes$presion == "Normal" &
tabla_completa_clientes$colesterol == "Normal",
"Saludable",
"No saludable"
)
tabla_completa_clientes$estado_salud <- ifelse(
tabla_completa_clientes$IMC >= 18.5 & tabla_completa_clientes$IMC <= 24.9 &
tabla_completa_clientes$presion == "Normal" &
tabla_completa_clientes$colesterol == "Normal",
"Saludable",
"No saludable"
)
tabla_completa_clientes$estado_salud <- ifelse(
tabla_completa_clientes$IMC >= 18.5 & tabla_completa_clientes$IMC <= 24.9 &
tabla_completa_clientes$Presion == "Normal" &
tabla_completa_clientes$Colesterol == "Normal",
"Saludable",
"No saludable"
)
modelo_salud <- glm(estado_salud ~ IMC, data = tabla_completa_clientes,family = binomial)
tabla_completa_clientes$estado_salud <- factor(tabla_completa_clientes$estado_salud)
tabla_completa_clientes$estado_salud <- relevel(tabla_completa_clientes$estado_salud, ref = "Saludable")
modelo_salud <- glm(estado_salud ~ IMC, data = tabla_completa_clientes,family = binomial)
summary(modelo_salud)
predicciones_modelo_salud <- predict(modelo_salud, type = "response")
View(predicciones_modelo_salud)
muestra <- floor(0.8 * nrow(datos_clientes_general))
seleccion <- sample(1:nrow(datos_clientes_general), size = muestra)
train <- datos_clientes_general[seleccion, ]
test <- datos_clientes_general[-seleccion, ]
table(Real = tabla_completa_clientes$estado_salud, Predicho = clase_predicha)
clase_predicha <- ifelse(predicciones_modelo_salud > 0.5, "No saludable", "Saludable")
clase_predicha <- factor(clase_predicha, levels = c("Saludable", "No saludable"))
table(Real = tabla_completa_clientes$estado_salud, Predicho = clase_predicha)
datos_clientes_general %>%
select(peso,
IMC)
kmeans_peso_IMC <- datos_clientes_general %>%
select(peso,
IMC)
kmeans_peso_IMC$peso<- scale(datos_clientes_general$peso)
kmeans_peso_IMC$IMC <- scale(datos_clientes_general$IMC)
View(kmeans_peso_IMC)
kmeans(kmeans_peso_IMC, centers =  k)
k = 3
kmeans(kmeans_peso_IMC, centers =  k)
resultado_kmeans <- kmeans(kmeans_peso_IMC, centers =  k)
datos_clientes_general$cluster_kmeans <- resultado_kmeans$cluster
ggplot(datos_clientes_general, aes(x = IMC, y = peso, color = as.factor(cluster_kmeans))) +
geom_point(size = 3) +
labs(title = "Clusters de clientes según IMC y peso",
x = "IMC", y = "Peso",
color = "Cluster") +
theme_minimal()
library(ggplot2)
ggplot(datos_clientes_general, aes(x = IMC, y = peso, color = as.factor(cluster_kmeans))) +
geom_point(size = 3) +
labs(title = "Clusters de clientes según IMC y peso",
x = "IMC", y = "Peso",
color = "Cluster") +
theme_minimal()
datos_clientes_general <- datos_clientes_general %>%
mutate(cluster_kmeans = case_when(
cluster_kmeans == 1 ~ "Bajo IMC",
cluster_kmeans == 2 ~ "IMC Medio",
cluster_kmeans == 3 ~ "Alto IMC"
))
ggplot(datos_clientes_general, aes(x = IMC, y = peso, color = as.factor(cluster_kmeans))) +
geom_point(size = 3) +
labs(title = "Clusters de clientes según IMC y peso",
x = "IMC", y = "Peso",
color = "Cluster") +
theme_minimal()
summary(modelo_salud)
library(caret)
control <- trainControl(method = "cv", number = 5)
modelo_cv <- train(
peso ~ altura,
data = clientes,
method = "lm",
trControl = control
)
control <- trainControl(method = "cv", number = 5)
modelo_cv <- train(
peso ~ altura,
data = datos_clientes_general,
method = "lm",
trControl = control
)
print(modelo_cv)
modelo_cv_log <- train(
saludable ~ imc + edad,
data = clientes,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 5)
)
modelo_cv_log <- train(
saludable ~ imc + edad,
data = datos_clientes_general,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 5)
)
modelo_cv_log <- train(
estado_salud ~ imc + edad,
data = tabla_completa_clientes,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 5)
)
modelo_cv_log <- train(
estado_salud ~ IMC + edad,
data = tabla_completa_clientes,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 5)
)
print(modelo_cv_log)
randomForest(frec_semanal ~ ., data = datos_clientes_general)
?randomForest
library(randomForest)
randomForest(frec_semanal ~ ., data = datos_clientes_general)
modelo_asistencia_rf <- randomForest(frec_semanal ~ ., data = datos_clientes_general)
importance(modelo_rf)
importance(modelo_asistencia_rf)
varImpPlot(modelo_asistencia_rf)
install.packages("tidyverse")
install.packages("readxl")
install.packages("dplyr")
install.packages("dplyr")
library(tidyverse)
library(readxl)
library(dplyr)
getwd()
setwd("C:\\Users\\brook\\OneDrive\\tablas_delitos_CEAD"
getwd()
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("readxl")
library(readxl)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
getwd()
source("C:/Users/brook/OneDrive/tablas_delitos_CEAD/script_delitos_CEAD.R", echo=TRUE)
getwd()
setwd("C://Users//brook//OneDrive//Escritorio//Portafolio//Ejercicios_Estadistica_aplicada_b-sica_David_Moore//Archivos")
ejercicio_2_30 <- read.csv("ejercicios_2_30_grados.csv")
ejercicio_2_30 <- read.csv("ejercicio_2_30_grados.csv")
str(ejercicio_2_30)
head(ejercicio_2_30)
regresion <- lm(Gas.m3. ~ Grados.día,data = ejercicio_2_30)
summary(regresion)
media_gas <- mean(ejercicio_2_30$Gas.m3.)
media_grados <- mean(ejercicio_2_30$Grados.día)
desv_gas <- sd(ejercicio_2_30$Gas.m3.)
desv_grados <- sd(ejercicio_2_30$Grados.día)
z_gas <- (ejercicio_2_30$Gas.m3. - media_gas) / desv_gas
z_grados <- (ejercicio_2_30$Grados.día - media_grados) / desv_grados
n_muestras <- nrow(ejercicio_2_30)
print(n_muestras)
correlacion_gas_grados <- (1 / (n_muestras - 1)) * sum(z_gas * z_grados)
r <- (1 / (n_muestras - 1)) * sum(z_gas * z_grados)
media_gas <- mean(ejercicio_2_30$Gas.m3.)
media_grados <- mean(ejercicio_2_30$Grados.día)
desv_gas <- sd(ejercicio_2_30$Gas.m3.)
desv_grados <- sd(ejercicio_2_30$Grados.día)
z_gas <- (ejercicio_2_30$Gas.m3. - media_gas) / desv_gas
z_grados <- (ejercicio_2_30$Grados.día - media_grados) / desv_grados
n_muestras <- nrow(ejercicio_2_30)
r <- (1 / (n_muestras - 1)) * sum(z_gas * z_grados)
b <- r * (desv_gas / desv_grados)
a <- media_gas - (b*media_grados)
resultados_z <- data.frame(
Variable = c("Gas(m3)","Grados(x día)"),
Media = c(media_gas,media_grados),
Desviacion = c(desv_gas,desv_grados),
Z_score = c(z_gas,z_grados)
)
resultados_mininmo_cuadratica = data.frame(
Medida = c("Regresión", "Pendiente","Ordenada de origen"),
Valores = c(r,b,a)
)
print(resultados_z)
print(resultados_mininmo_cuadratica)
resultados <- data.frame(
Variable = c("Gas(m3)","Grados(x día)"),
Media = c(media_gas,media_grados),
Desviacion = c(desv_gas,desv_grados)
)
print(resultados)
resultados_mininmo_cuadratica = data.frame(
Medida = c("Correlación", "Pendiente","Ordenada de origen"),
Valores = c(r,b,a)
print(resultados_mininmo_cuadratica)
resultados_mininmo_cuadratica = data.frame(
Medida = c("Correlación", "Pendiente","Ordenada de origen"),
Valores = c(r,b,a)
)
print(resultados_mininmo_cuadratica)
resultados <- data.frame(
Variable = c("Gas(m3)","Grados - día"),
Media = c(media_gas,media_grados),
Desviacion = c(desv_gas,desv_grados)
)
resultados_mininmo_cuadratica = data.frame(
Medida = c("Correlación (r)", "Pendiente (b)","Intercepto (a)"),
Valores = c(r,b,a)
)
print(resultados)
print(resultados_mininmo_cuadratica)
